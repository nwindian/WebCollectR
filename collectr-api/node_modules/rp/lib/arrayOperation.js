var base = require("./base");
var variable = require("./variable");
var restricted = require("./restricted");

module.exports = function rpArrayOperation(array, fnUpdated, fnAdded, fnRemoved) {
	var internal = {
		set: function(v) {
			this.v = v;
		}
	};

	var value = array._getUndependend();
	if(Array.isArray(value))
		fnUpdated.call(internal, value, undefined, internal);

	internal = variable(internal.v);

	internal.isConst = function() {
		return array.isConst();
	};

	array.onUpdated(onArrayUpdate);
	array.onAdded(onArrayItemAdded);
	array.onRemoved(onArrayItemRemoved);
	array.ref(internal);

	internal.onceDisposed(function() {
		array.removeUpdatedListener(onArrayUpdate);
		array.removeAddedListener(onArrayItemAdded);
		array.removeRemovedListener(onArrayItemRemoved);
		array.unref(internal);
	});

	function onArrayUpdate(newValue, oldValue) {
		if(!Array.isArray(newValue))
			internal.set(undefined);
		else
			fnUpdated.call(internal, newValue, oldValue, internal);
	}

	function onArrayItemAdded(idx, item) {
		fnAdded.call(internal, idx, item, internal);
	}

	function onArrayItemRemoved(idx, item) {
		fnRemoved.call(internal, idx, item, internal);
	}

	var p = restricted(internal);
	p.internal = internal;
	return p;
}