var base = require("./base");
var variable = require("./variable");
var delegated = require("./delegated");

module.exports = function rpFilter(array, fn) {
	var computedFilterResults;
	var computedChangedFunctions;
	var result, resultIndices;

	var itemRef = {};

	var internal = {
		set: function(v) { this.v = v; }
	};

	onUpdated();

	internal = variable(internal.v);

	internal.isConst = function() {
		return array.isConst() && computedFilterResults.every(function(c) {
			return c.isConst();
		});
	};

	var p = delegated(internal);

	array.onUpdated(onUpdated);
	array.onAdded(onAdded);
	array.onRemoved(onRemoved);
	array.ref(p);

	p.onceDisposed(function() {
		disconnect();
		array.removeUpdatedListener(onUpdated);
		array.removeAddedListener(onAdded);
		array.removeRemovedListener(onRemoved);
		array.unref(p);
	});

	function makeToggleItemFn(computed) {
		return function() {
			var idx = computedFilterResults.indexOf(computed);
			for(var i = 0; i < resultIndices.length && resultIndices[i] < idx; i++);
			if(computed._getUndependend()) {
				// Insert
				result.splice(i, 0, array(idx));
				resultIndices.splice(i, 0, idx);
				internal._splice(i, 0, array(idx));
			} else {
				// Remove
				result.splice(i, 1);
				resultIndices.splice(i, 1);
				internal.splice(i, 1);
			}
		};
	}

	function disconnect() {
		if(computedFilterResults) {
			computedFilterResults.forEach(function(computed, idx) {
				computed.removeChangedListener(computedChangedFunctions[idx]);
				computed.unref(itemRef);
			});
		}
		computedFilterResults = undefined;
	}

	function onUpdated() {
		disconnect();
		computedFilterResults = [];
		computedChangedFunctions = [];

		var length = array._getUndependend();
		length = Array.isArray(length) ? length.length : 0;
		result = [];
		resultIndices = [];

		var idx = 0;
		for(var i = 0; i < length; i++) {
			var computed = array(i).computed(fn).asBool().ref(itemRef);
			computed.constructor = function rpFilterItem1() {};
			computedFilterResults.push(computed);
			if(computed._getUndependend()) {
				result.push(array(i));
				resultIndices.push(i);
			}
			var changeFn = makeToggleItemFn(computed);
			computedChangedFunctions.push(changeFn)
			computed.onChanged(changeFn);
		}
		internal.set(result.slice());
	}

	function onAdded(idx, item) {
		for(var i = 0; i < resultIndices.length; i++)
			if(resultIndices[i] >= idx)
				resultIndices[i]++;
		var computed = array(idx).computed(fn).asBool().ref(itemRef);
		computed.constructor = function rpFilterItem2() {};
		var changeFn = makeToggleItemFn(computed);
		computedFilterResults.splice(idx, 0, computed);
		computedChangedFunctions.splice(idx, 0, changeFn);
		if(computed._getUndependend()) {
			for(var i = 0; i < resultIndices.length && resultIndices[i] < idx; i++);
			result.splice(i, 0, array(idx));
			resultIndices.splice(i, 0, idx);
			internal.splice(i, 0, array(idx));
		}
		computed.onChanged(changeFn);
	}

	function onRemoved(idx, item) {
		for(var i = 0; i < resultIndices.length; i++) {
			if(resultIndices[i] == idx)
				resultIndices[i] = -1;
			else if(resultIndices[i] >= idx)
				resultIndices[i]--;
		}
		var computed = computedFilterResults[idx];
		var changeFn = computedChangedFunctions[idx]
		computedFilterResults.splice(idx, 1);
		computedChangedFunctions.splice(idx, 1);
		computed.removeChangedListener(changeFn);
		for(var i = 0; i < resultIndices.length && resultIndices[i] !== -1; i++);
		if(i < result.length) {
			result.splice(i, 1);
			resultIndices.splice(i, 1);
			internal.splice(i, 1);
		}
		computed.unref(itemRef);
	}

	return p;
};