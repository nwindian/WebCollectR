var should = require("should");
var rp = require("../");
var checkRefs = require("./checkRefs");

describe("const", function() {
	it("should be able to get the value", checkRefs(function() {
		var x = rp.const("test");
		x().should.be.eql("test");
		x.g().should.be.eql("test");
		x.isWritable().should.be.eql(false);
	}));
	it("should not capture rp.const", checkRefs(function() {
		var x = rp.const("test");
		var caputured = rp.capture(function() {
			x();
		});
		caputured.should.be.eql({dependencies:[], scope:[], value: undefined});
	}));
	it("should be isConst", checkRefs(function() {
		var x = rp.const("test");
		var y = rp.variable("test");
		var z = rp.const([0,1,2,3]);
		x.isConst().should.be.eql(true);
		y.isConst().should.be.eql(false);
		z.isConst().should.be.eql(true);
		rp.computed(function(){}).isConst().should.be.eql(true);
		rp.computed(function(){return x()}).isConst().should.be.eql(true);
		rp.computed(function(){return y()}).isConst().should.be.eql(false);
		rp.computed(function(){return x()+y()}).isConst().should.be.eql(false);
		rp.delegated(function(){return x}).isConst().should.be.eql(true);
		rp.delegated(function(){return y}).isConst().should.be.eql(false);
		rp.delegated(function(){return x() ? x : y}).isConst().should.be.eql(true);
		rp.delegated(function(){return x() ? y : x}).isConst().should.be.eql(false);
		rp.delegated(function(){return [x, x];}).isConst().should.be.eql(true);
		rp.delegated(function(){return [x, y];}).isConst().should.be.eql(false);
		z.size().isConst().should.be.eql(true);
		z.map(function(a) { return a+1; }).isConst().should.be.eql(true);
		z.map(function(a) { return a+y(); }).isConst().should.be.eql(false);
		z.filter(function(a) { return a; }).isConst().should.be.eql(true);
		z.filter(function(a) { return a !== y(); }).isConst().should.be.eql(false);
	}));
});