var should = require("should");
var rp = require("../");
var checkRefs = require("./checkRefs");

describe("delegatedFilter", function() {
	it("should filter a delegated array", checkRefs(function() {
		var array = rp.variable([rp.const(1), rp.const(2), rp.const(3)]);
		var delegatedArray = array.delegated();
		delegatedArray().should.be.eql([1,2,3]);
		var x = rp.variable(0);
		var filtered = delegatedArray.filter(function(item) {
			return item % 2 === x();
		});
		filtered().should.be.eql([2]);
		array.push(rp.const(4));
		filtered().should.be.eql([2, 4]);
		array.shift();
		filtered().should.be.eql([2, 4]);
		array.shift();
		filtered().should.be.eql([4]);
		rp.atomic(function() {
			array.unshift(rp.const(2));
			array.shift();
		});
		filtered().should.be.eql([4]);
		x.set(1);
		filtered().should.be.eql([3]);
		array.unshift(rp.const(2));
		array.unshift(rp.const(1));
		delegatedArray().should.be.eql([1,2,3,4]);
		filtered().should.be.eql([1, 3]);
	}));
	it("should filter a delegated array with map", checkRefs(function() {
		var array = rp.variable([1, 2, 3]);
		var delegatedArray = array.map(function(item) {
			return rp.variable(item);
		}).delegated();
		delegatedArray.constructor = function Test() {};
		delegatedArray().should.be.eql([1,2,3]);
		var x = rp.variable(0);
		var filtered = delegatedArray.filter(function(item) {
			return item % 2 === x();
		});
		filtered().should.be.eql([2]);
		array.push(4);
		delegatedArray().should.be.eql([1,2,3,4]);
		filtered().should.be.eql([2, 4]);
		array.shift();
		filtered().should.be.eql([2, 4]);
		array.shift();
		filtered().should.be.eql([4]);
		rp.atomic(function() {
			array.unshift(2);
			array.shift();
		});
		filtered().should.be.eql([4]);
		x.set(1);
		filtered().should.be.eql([3]);
		array.unshift(2);
		array.unshift(1);
		delegatedArray().should.be.eql([1,2,3,4]);
		filtered().should.be.eql([1, 3]);
	}));
});
