var base = require("../lib/base");

var orgRef = base.prototype.ref;
var orgUnref = base.prototype.unref;
var orgInit = base.prototype.init;

base.prototype.ref = function ref(o) {
	if(o) {
		// console.log(this._toString(), "add ref to", o._toString ? o._toString() : o);
		this._theRefs = (this._theRefs || []);
		this._theRefs.push(o);
	}
	return orgRef.call(this, o);
};

base.prototype.unref = function unref(o) {
	if(o) {
		// console.log(this._toString(), "remove ref to", o._toString ? o._toString() : o);
		var idx = this._theRefs ? this._theRefs.indexOf(o) : -1;
		if(idx < 0) throw new Error("Called unref(" + (base.isRp(o)?o._toString():o) + "), but have no ref remaining " + this._toString() + " => " + this._toStringRefs());
		this._theRefs.splice(idx, 1);
	}
	if(this._refs === 1)
		base._refs.splice(base._refs.indexOf(this), 1);
	return orgUnref.call(this, o);
};

base.prototype.init = function init() {
	this._theRefs = ["temporary"];
	base._refs.push(this);
	return orgInit.call(this);
};

base.prototype._toStringRefs = function _toStringRefs() {
	if(!this._theRefs) return "";
	return this._theRefs.map(function(ref) {
		if(base.isRp(ref)) return ref._toString();
		return "" + ref;
	}).join(", ");
};


module.exports = function(fn) {
	return function(done) {
		base._refs.length = 0;
		var ex;
		base.scope(function() {
			// try {
				fn();
			// } catch(e) {
				// ex = e;
			// }
		}).temporary();
		// console.log(refsToString());
		process.nextTick(function() {
			process.nextTick(function() {
				if(base._refs.length > 0) throw new Error("Refs after test ends:\n" + refsToString());
				base._refs = [];
				done(ex);
			});
		});
	};
}

module.exports.printRefs = printRefs;

function printRefs() {
	console.log(refsToString());
};

function refsToString() {
	return base._refs.map(function(r) {
		return r._toString() + " => " + r._toStringRefs();
	}).join("\n");
}